Approach-
1.  If both nodes are null, they are the same.
2.  If only one node is null, they are different.
3.  If both nodes exist but have different values, they are different.
4.  Otherwise (both exist and have same value), recursively check if their left subtrees are the same AND their right subtrees are the same.


class Solution {

    public boolean isIdentical(TreeNode p,TreeNode q){
        if(p==null && q==null)return true;
        if(p==null || q==null)return false;

        if(p.val!=q.val)return false;
        if(p.val==q.val){
            boolean l=isIdentical(p.left,q.left);
            boolean r=isIdentical(p.right,q.right);
            return l && r ;
        }
        return false;
    }


    public boolean isSameTree(TreeNode p, TreeNode q) {
        boolean ans=isIdentical(p,q);
        return ans;
    }
}
